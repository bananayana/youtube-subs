"""
Django settings for extension project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""
from __future__ import absolute_import
import datetime
import logging.config
import os

from celery.schedules import crontab
from kombu import Queue, Exchange


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ind6pkjgexnok*n9#%ew@dpepr+61rbs-7+z-on0jh8fbi6^!*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'server.apps.ServerConfig',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'extension.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'extension.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('POSTGRES_DB', 'postgres'),
        'USER': os.environ.get('POSTGRES_USER', 'postgres'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'postgres'),
        'HOST': os.environ.get('DB_HOST', 'db'),
        # 'HOST': '172.19.0.2',
        'PORT': os.environ.get('DB_PORT', '5432'),
        # 'HOST': os.environ.get('DB_PORT_5432_TCP_ADDR', 'youtube-subs.cdik8odrzxrw.eu-central-1.rds.amazonaws.com'),
        # 'PORT': os.environ.get('DB_PORT_5432_TCP_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny'
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'djangorestframework_camel_case.parser.CamelCaseJSONParser',
    ],
}


INDEX_DIR = os.path.join(BASE_DIR, 'index')

SEARCH_VAR = 'q'
PAGE_VAR = 'page'

GOOGLE_API_DEVELOPER_KEY = os.environ.get('GOOGLE_API_DEVELOPER_KEY')
YOUTUBE_API_SERVICE_NAME = 'youtube'
YOUTUBE_API_VERSION = 'v3'

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ['GOOGLE_CLIENT_ID']
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ['GOOGLE_CLIENT_SECRET']

SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['email', 'profile']

SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True

SOCIAL_AUTH_URL_NAMESPACE = 'social'

JWT_COOKIE_KEY = 'youtubesubs_auth_JWT'

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(minutes=20),
    'JWT_AUTH_COOKIE': JWT_COOKIE_KEY
}

YOUTUBE_VIDEO_URL = 'https://www.youtube.com/watch?v={video_id}'
DEFAULT_PREVIEW_START = 10
DEFAULT_PREVIEW_DURATION = 5
DEFAULT_DURATION_REQUIREMENT = 10

INDEX_SEARCH_FIELDS = ['text', 'title', 'description', 'id']

# TODO: find best options
PREVIEW_PROCESSING_OPTIONS = {
    'format': 'bestvideo[height <=? 480][ext=webm]/best[ext=webm][height <=? 480]',
}


S3_BUCKET_NAME = 'youtubesubs'
S3_PREVIEWS_FOLDER = 'previews'
S3_BASE_URL = 'https://s3.eu-central-1.amazonaws.com'
AWS_ACCESS_KEY = os.environ['AWS_ACCESS_KEY']
AWS_SECRET_KEY = os.environ['AWS_SECRET_KEY']


# CELERY SETTINGS
CELERY_TIMEZONE = 'UTC'
CELERY_ENABLE_UTC = True
CELERY_BROKER_URL = os.environ['CELERY_BROKER_URL']
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_RESULT_BACKEND = 'amqp'

# CELERY_TASK_IGNORE_RESULTS = True


CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_WORKER_CONCURRENCY = 2
# CELERY_RESULT_EXPIRES = 1
# CELERY_TASK_IGNORE_RESULT = True
CELERY_TASK_STORE_ERRORS_EVEN_IF_IGNORED = True
CELERY_ACCEPT_CONTENT = ['json']

CELERY_TASK_DEFAULT_QUEUE = 'main'
CELERY_TASK_DEFAULT_EXCHANGE = 'main'
CELERY_TASK_DEFAULT_ROUTING_KEY = 'main'

OTHER_QUEUES = (
    CELERY_TASK_DEFAULT_QUEUE,
    'manual',
    'periodic'
)


CELERY_TASK_QUEUES = [Queue(queue, Exchange(queue), routing_key=queue) for queue in OTHER_QUEUES]

# ----- Job schedules ----- #
CELERY_IMPORTS = (
    'server.tasks',
)

CELERY_BEAT_SCHEDULE = {
    'create_previews': {
        'task': 'server.tasks.create_previews',
        'schedule': 300, #crontab(minute=30, hour=4)
        'options': {'queue': 'periodic'}
    }
}

# ----- Log Settings ----- #
CELERY_WORKER_HIJACK_ROOT_LOGGER = False


LOG_CONFIG = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '[%(asctime)s %(levelname)s/%(processName)s] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'task': {
            'format': '[CELERY] [%(asctime)s %(levelname)s/%(processName)s] [%(task_id)s] %(message)s',
            '()': 'celery.app.log.TaskFormatter',
        }
    },
    'handlers': {
        'standard': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
        'task': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'task',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        }
    },
    'loggers': {
        'celery.task': {
            'level': 'INFO',
            'handlers': ['task'],
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        '': {
            'level': 'INFO',
            'handlers': ['standard'],
            'propagate': True,
        }
    },
}

logging.config.dictConfig(LOG_CONFIG)
